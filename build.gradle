plugins {
 	id 'org.hidetake.ssh' version '2.9.0'
}

apply plugin: 'java'

repositories{
    jcenter()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
}

apply plugin: 'application'
mainClassName = "hello.HelloWorld"

dependencies{
      if (project.hasProperty("rpi")) {
      compile  files('C:/mvrobotics/wpilib/raspberryPi/lib/wpiutil-java-2019.1.1-beta-2.jar')
      compile  files('C:/mvrobotics/wpilib/raspberryPi/lib/ntcore-java-2019.1.1-beta-2.jar')
      compile files('C:/mvrobotics/wpilib/raspberryPi/lib/ntcore-jni-2019.1.1-beta-2-linuxraspbian.jar')
   } else {
      compile  files('C:/Users/mvrobotics/wpilib/java/current/lib/wpiutil.jar')
      compile  files('C:/Users/mvrobotics/wpilib/java/current/lib/ntcore.jar')     
       compile  files('C:/Users/mvrobotics/wpilib/java/current/lib/ntcore-jni.jar')
   } 
   compile 'com.pi4j:pi4j-core:1.2-SNAPSHOT'
   testCompile 'junit:junit:4.12'
    
}

tasks.withType(Test) {
   if (project.hasProperty("rpi")){
      enabled = false;
   } else {
 testLogging {
      exceptionFormat "full"
      events "started", "skipped", "passed", "failed"
      showStandardStreams true
   }
   }
  
}

task bundleJar (type: Jar) {
   baseName = 'helloworld'
   version =  '0.1.0'
   manifest {
       attributes(
               'Main-Class': 'hello.HelloWorld'
       )
          from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
   with jar
}
}


jar.dependsOn bundleJar
remotes {
 	raspberryPi {
   		host = '10.59.62.101'
   		user = 'pi'
   		password = 'G0r0b0t'
 	}
}

task deploy (dependsOn: 'test'){
   doLast {
      ssh.run {
         session(remotes.raspberryPi) {
            put from: 'build/libs/helloworld-0.1.0.jar', into: '.'
            execute 'java -Djava.library.path=lib -jar helloworld-0.1.0.jar'
         }
      }
   }
}

task runOnPi (){
   doLast{
      ssh.run{
         session(remotes.raspberrypi){
            execute 'java -Djava.library.path=lib -jar helloworld-0.1.0.jar'
         }
      }
   }
}

task poweroff(){
    doLast {
    ssh.run{
        session(remotes.raspberryPi){
            execute 'sudo poweroff'
        }
    }}}
